name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [nightly]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --verbose

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Security audit
        uses: rustsec/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Dependency policy check
        if: matrix.os == 'ubuntu-latest'
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check advisories

      - name: Install tarpaulin and llvm-cov
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-tarpaulin --locked --force && cargo install cargo-llvm-cov

      - name: Generate coverage with tarpaulin
        if: matrix.os == 'ubuntu-latest'
        run: cargo tarpaulin --verbose --all-features --workspace --timeout 300 --out Xml --exclude-files tests/*

      - name: Generate coverage with llvm-cov
        if: matrix.os == 'ubuntu-latest'
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info --fail-under-lines 80

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && (github.event_name != 'pull_request' || github.actor != 'dependabot[bot]')
        uses: codecov/codecov-action@v5
        with:
          files: ./cobertura.xml,./lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  test-musl:
    name: Test (musl)
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        target: [x86_64-unknown-linux-musl, aarch64-unknown-linux-musl]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross --locked

      - name: Run cross tests
        run: cross test --target ${{ matrix.target }} --all-features

  build:
    name: Build
    needs: [test, test-musl]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rsmd
            asset_name: rsmd-linux-x86_64
            use_cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: rsmd
            asset_name: rsmd-linux-musl-x86_64
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rsmd
            asset_name: rsmd-linux-aarch64
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: rsmd
            asset_name: rsmd-linux-musl-aarch64
            use_cross: true
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rsmd
            asset_name: rsmd-macos-aarch64
            use_cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rsmd.exe
            asset_name: rsmd-windows-x86_64
            use_cross: false
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use_cross == true
        run: cargo install cross --locked

      - name: Build release (cross)
        if: matrix.use_cross == true
        run: cross build --release --target ${{ matrix.target }}

      - name: Build release (native)
        if: matrix.use_cross != true
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
